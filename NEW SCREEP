main

var roleHarvester = require('role.harvester');
var roleUpgrader = require('role.upgrader');
var roleBuilder = require('role.builder');
var roleCarrier = require('role.carrier');

module.exports.loop = function () {

    for(var name in Memory.creeps) {
        if(!Game.creeps[name]) {
            delete Memory.creeps[name];
            console.log('Clearing non-existing creep memory:', name);
        }
    }

    Game.spawns['Spawn1'].spawnCreep([WORK,CARRY,CARRY,MOVE,MOVE], "Upgrader", {memory: {role: 'upgrader'}});
    if (Game.spawns['Spawn1'].energyCapacity<=899 && Game.spawns['Spawn1'].energy<=899){Game.spawns['Spawn1'].spawnCreep([WORK,CARRY,CARRY,MOVE,MOVE], "Builder" + Game.time, {memory: {role: 'builder'}});}
    Game.spawns['Spawn1'].spawnCreep([WORK,CARRY,CARRY,MOVE,MOVE], "Upgrader", {memory: {role: 'upgrader'}});
    Game.spawns['Spawn1'].spawnCreep([WORK,CARRY,CARRY,MOVE,MOVE], "upgrader", {memory: {role: 'upgrader'}});

    var harvesters = _.filter(Game.creeps, (creep) => creep.memory.role == 'harvester');
    console.log('Harvesters: ' + harvesters.length);
    
    if(harvesters.length < 2 && Object.keys(Game.creeps).length > 0) {
        var newName = 'Harvester' + Game.time;
        console.log('Spawning new harvester: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([WORK,WORK,WORK,WORK,WORK,WORK,WORK,CARRY,MOVE], newName, 
            {memory: {role: 'harvester'}});
    }
    
    var carriers = _.filter(Game.creeps, (creep) => creep.memory.role == 'carrier');
    console.log('carrier: ' + carriers.length);

    if(carriers.length < harvesters.length*2 + 1) {
        var newName = 'carrier' + Game.time;
        console.log('Spawning new carrier: ' + newName);
        Game.spawns['Spawn1'].spawnCreep([WORK,CARRY,CARRY,MOVE,MOVE], newName, 
            {memory: {role: 'carrier'}});
    }
    
    if(Game.spawns['Spawn1'].spawning) { 
        var spawningCreep = Game.creeps[Game.spawns['Spawn1'].spawning.name];
        Game.spawns['Spawn1'].room.visual.text(
            '🛠️' + spawningCreep.memory.role,
            Game.spawns['Spawn1'].pos.x + 1, 
            Game.spawns['Spawn1'].pos.y, 
            {align: 'left', opacity: 0.8});
    }

    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
        if(creep.memory.role == 'harvester') {
            roleHarvester.run(creep);
        }
        if(creep.memory.role == 'carrier') {
            roleCarrier.run(creep);
        }
        if(creep.memory.role == 'upgrader') {
            roleUpgrader.run(creep);
        }
        if(creep.memory.role == 'builder') {
            roleBuilder.run(creep);
        }
    }
}


role.builder

var roleUpgrader = require('role.upgrader');
var roleBuilder = {

    /** @param {Creep} creep */
    run: function (creep) {
        if(creep.memory.building && creep.carry.energy == 0) {
            creep.memory.building = false;
            creep.say('🔄 harvest');
        }
        if(!creep.memory.building && creep.carry.energy == creep.carryCapacity) {
            creep.memory.building = true;
            creep.say('🚧 build');
        }

        if(creep.memory.building) {
            var targets = creep.room.find(FIND_CONSTRUCTION_SITES);
            if(targets.length) {
                if(creep.build(targets[0]) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }else {
                roleUpgrader.run(creep);
            }
        } else {
            if(creep.harvest(creep.pos.findClosestByPath(FIND_SOURCES)) == ERR_NOT_IN_RANGE) {
                creep.moveTo(creep.pos.findClosestByPath(FIND_SOURCES), {visualizePathStyle: {stroke: '#ffaa00'}});
            }
        }
    }
};

module.exports = roleBuilder;




role.carrier

var roleBuilder = require('role.builder');
var roleCarrier = {

    /** @param {Creep} creep **/
    run: function(creep) {
        
	    if(creep.carry.energy < creep.carryCapacity) {
            if (creep.pos.findClosestByPath(_.filter(Game.creeps, {memory: 'harvester'})) != null){
                creep.moveTo(creep.pos.findClosestByPath(_.filter(Game.creeps, {memory: 'harvester'})).pos);
                if(creep.harvest(creep.pos.findClosestByPath(FIND_SOURCES)) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(creep.pos.findClosestByPath(FIND_SOURCES), {visualizePathStyle: {stroke: '#ffaa00'}});
                }
                creep.moveTo(creep.pos.findClosestByRange(_.filter(Game.creeps, {memory: 'harvester'})).pos);
            }else{
	            if(creep.harvest(creep.pos.findClosestByPath(FIND_SOURCES)) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(creep.pos.findClosestByPath(FIND_SOURCES), {visualizePathStyle: {stroke: '#ffaa00'}});
                }
            }
	    }
        else {
            console.log("test")
            
            var targets = creep.room.find(FIND_STRUCTURES, {
                filter: (structure) => {
                    return (structure.structureType == STRUCTURE_EXTENSION ||
                        structure.structureType == STRUCTURE_SPAWN ||
                        structure.structureType == STRUCTURE_TOWER) && structure.energy < structure.energyCapacity;
                }
            });
            console.log(targets)
            if(targets.length > 0) {
                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
            else{roleBuilder.run(creep);}
        }
        creep.room.createConstructionSite(creep.pos,STRUCTURE_ROAD)
	}
};

module.exports = roleCarrier;




role.harvester

var roleHarvester = {

    /** @param {Creep} creep **/
    run: function(creep) {
	    if(creep.carry.energy < creep.carryCapacity) {
            if(creep.harvest(creep.pos.findClosestByPath(FIND_SOURCES)) == ERR_NOT_IN_RANGE) {
                creep.moveTo(creep.pos.findClosestByPath(FIND_SOURCES), {visualizePathStyle: {stroke: '#ffaa00'}});
            }
        }
        else {
            var target = creep.pos.findClosestByPath(_.filter(Game.creeps, {memory: 'carrier'}))
            if(creep.transfer(target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                creep.moveTo(target, {visualizePathStyle: {stroke: '#ffffff'}});
            }
            if (target == null){
                var targets = creep.room.find(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) &&
                            structure.energy < structure.energyCapacity;
                    }
            });
            if(targets.length > 0) {
                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
            }
        }
	}
};

module.exports = roleHarvester;





role.upgrader

var roleUpgrader = {

    /** @param {Creep} creep **/
    run: function(creep) {

        creep.room.createConstructionSite(creep.pos,STRUCTURE_ROAD)

        if(creep.memory.upgrading && creep.carry.energy == 0) {
            creep.memory.upgrading = false;
	    }
	    if(!creep.memory.upgrading && creep.carry.energy == creep.carryCapacity) {
	        creep.memory.upgrading = true;
	    }

	    if(creep.memory.upgrading) {
            if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
                creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
            }
        }
        else {
            if(creep.harvest(creep.pos.findClosestByPath(FIND_SOURCES)) == ERR_NOT_IN_RANGE) {
                creep.moveTo(creep.pos.findClosestByPath(FIND_SOURCES), {visualizePathStyle: {stroke: '#ffaa00'}});
            }
            if (creep.room.controller.level >= 8){roleCarrier.run(creep);}
        }
	}
};

module.exports = roleUpgrader;
